package com.nt.rest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.nt.dto.AuthRequest;
import com.nt.dto.AuthResponse;
import com.nt.entity.Customer;
import com.nt.service.AuthService;

@RequestMapping("/auth")
@RestController
@CrossOrigin
public class AuthController {
	@Autowired
	private AuthService service;
	
	@Autowired
	private PasswordEncoder encode;
	
	@Autowired
	private AuthenticationManager authenticationManager;

	@PostMapping("/register")
	public ResponseEntity<String> addNewUser(@RequestBody Customer user) {
	    String response = service.saveUser(user);
	    return new ResponseEntity<>(response, HttpStatus.CREATED);
	}

	@PostMapping("/token")
	public ResponseEntity<AuthResponse> getToken(@RequestBody AuthRequest authRequest) {
	    AuthResponse response = new AuthResponse();
	    try {
	        Authentication authenticate = authenticationManager.authenticate(
	                new UsernamePasswordAuthenticationToken(authRequest.getEmail(), authRequest.getPassword()));
	        if (authenticate.isAuthenticated()) {
	            String token = service.generateToken(authRequest.getEmail());
	            response.setToken(token);
	            response.setLoginValid("yes");
	            return ResponseEntity.ok(response);
	        }
	    } catch (Exception e) {
	        response.setToken("");
	        response.setLoginValid("no");
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
	    }
	    return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(response);
	}

	@GetMapping("/validate")
	public String validateToken(@RequestParam("token") String token) {
		service.validateToken(token);
		return "Token is valid";
	}
}
